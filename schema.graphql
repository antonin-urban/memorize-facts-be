# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  email: String
  password: PasswordState
  isAdmin: Boolean
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  email: StringFilter
  isAdmin: BooleanFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserOrderByInput {
  id: OrderDirection
  email: OrderDirection
  isAdmin: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  email: String
  password: String
  isAdmin: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  email: String
  password: String
  isAdmin: Boolean
}

type Fact {
  id: ID!
  name: String
  description: String
  deadline: DateTime
  active: Boolean
  schedules(
    where: ScheduleWhereInput! = {}
    orderBy: [ScheduleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Schedule!]
  schedulesCount(where: ScheduleWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input FactWhereUniqueInput {
  id: ID
}

input FactWhereInput {
  AND: [FactWhereInput!]
  OR: [FactWhereInput!]
  NOT: [FactWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  deadline: DateTimeNullableFilter
  active: BooleanFilter
  schedules: ScheduleManyRelationFilter
  tags: TagManyRelationFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input ScheduleManyRelationFilter {
  every: ScheduleWhereInput
  some: ScheduleWhereInput
  none: ScheduleWhereInput
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input FactOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  deadline: OrderDirection
  active: OrderDirection
}

input FactUpdateInput {
  name: String
  description: String
  deadline: DateTime
  active: Boolean
  schedules: ScheduleRelateToManyForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input ScheduleRelateToManyForUpdateInput {
  disconnect: [ScheduleWhereUniqueInput!]
  set: [ScheduleWhereUniqueInput!]
  create: [ScheduleCreateInput!]
  connect: [ScheduleWhereUniqueInput!]
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input FactUpdateArgs {
  where: FactWhereUniqueInput!
  data: FactUpdateInput!
}

input FactCreateInput {
  name: String
  description: String
  deadline: DateTime
  active: Boolean
  schedules: ScheduleRelateToManyForCreateInput
  tags: TagRelateToManyForCreateInput
}

input ScheduleRelateToManyForCreateInput {
  create: [ScheduleCreateInput!]
  connect: [ScheduleWhereUniqueInput!]
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Tag {
  id: ID!
  name: String
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
}

type Schedule {
  id: ID!
  name: String
  type: ScheduleTypeType
  scheduleParameters: JSON
  deleted: Boolean
  updatedAt: DateTime
  frontendId: String
}

enum ScheduleTypeType {
  NOTIFY_EVERY
  NOTIFY_AT
}

input ScheduleWhereUniqueInput {
  id: ID
  frontendId: String
}

input ScheduleWhereInput {
  AND: [ScheduleWhereInput!]
  OR: [ScheduleWhereInput!]
  NOT: [ScheduleWhereInput!]
  id: IDFilter
  name: StringFilter
  type: ScheduleTypeTypeNullableFilter
  deleted: BooleanFilter
  updatedAt: DateTimeNullableFilter
  frontendId: StringFilter
}

input ScheduleTypeTypeNullableFilter {
  equals: ScheduleTypeType
  in: [ScheduleTypeType!]
  notIn: [ScheduleTypeType!]
  not: ScheduleTypeTypeNullableFilter
}

input ScheduleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  type: OrderDirection
  deleted: OrderDirection
  updatedAt: OrderDirection
  frontendId: OrderDirection
}

input ScheduleUpdateInput {
  name: String
  type: ScheduleTypeType
  scheduleParameters: JSON
  deleted: Boolean
  updatedAt: DateTime
  frontendId: String
}

input ScheduleUpdateArgs {
  where: ScheduleWhereUniqueInput!
  data: ScheduleUpdateInput!
}

input ScheduleCreateInput {
  name: String
  type: ScheduleTypeType
  scheduleParameters: JSON
  deleted: Boolean
  updatedAt: DateTime
  frontendId: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createFact(data: FactCreateInput!): Fact
  createFacts(data: [FactCreateInput!]!): [Fact]
  updateFact(where: FactWhereUniqueInput!, data: FactUpdateInput!): Fact
  updateFacts(data: [FactUpdateArgs!]!): [Fact]
  deleteFact(where: FactWhereUniqueInput!): Fact
  deleteFacts(where: [FactWhereUniqueInput!]!): [Fact]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createSchedule(data: ScheduleCreateInput!): Schedule
  createSchedules(data: [ScheduleCreateInput!]!): [Schedule]
  updateSchedule(
    where: ScheduleWhereUniqueInput!
    data: ScheduleUpdateInput!
  ): Schedule
  updateSchedules(data: [ScheduleUpdateArgs!]!): [Schedule]
  deleteSchedule(where: ScheduleWhereUniqueInput!): Schedule
  deleteSchedules(where: [ScheduleWhereUniqueInput!]!): [Schedule]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  facts(
    where: FactWhereInput! = {}
    orderBy: [FactOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Fact!]
  fact(where: FactWhereUniqueInput!): Fact
  factsCount(where: FactWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  schedules(
    where: ScheduleWhereInput! = {}
    orderBy: [ScheduleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Schedule!]
  schedule(where: ScheduleWhereUniqueInput!): Schedule
  schedulesCount(where: ScheduleWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
